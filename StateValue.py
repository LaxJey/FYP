import numpy


class StateValue:

    def __init__(self):
        self.V = numpy.zeros((31, 10)) # optimal policy
        self.T = numpy.zeros((31, 10)) # table
        self.D = numpy.zeros((31, 10)) # double
        self.S = numpy.zeros((11, 10)) # split
        self.PT = None # player transition matrix
        self.DT = None # dealer transition matrix
        self.A = None # absorption matrix
        self.Y = None # matrix with all stand values
        self.fix = None

    #creates the absorption matrix for the dealer
    def matrices(self):
        self.PT = numpy.array([
            [0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0,
             0, 0, 0, 0, 0, 0, 0, 16 / 52, 0],
            [0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             16 / 52, 0,
             0, 0, 0, 0, 0, 0, 0, 4 / 52, 0],
            [0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52,
             16 / 52,
             0, 0, 0, 0, 0, 0, 0, 4 / 52, 0],
            [0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52,
             16 / 52, 0, 0, 0, 0, 0, 0, 4 / 52, 0],
            [0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52,
             4 / 52,
             16 / 52, 0, 0, 0, 0, 0, 4 / 52, 0],
            [0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52,
             4 / 52,
             16 / 52, 0, 0, 0, 0, 4 / 52, 0],
            [0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52, 16 / 52, 0, 0, 0, 4 / 52, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52,
             4 / 52, 16 / 52, 0, 0, 4 / 52, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52, 4 / 52, 16 / 52, 0, 4 / 52, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52, 4 / 52, 16 / 52, 4 / 52, 0],
            [0, 0, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             16 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             16 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52,
             16 / 52, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52, 16 / 52, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52,
             4 / 52, 16 / 52, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52,
             4 / 52, 16 / 52, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52, 4 / 52, 16 / 52, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52,
             4 / 52, 4 / 52, 16 / 52, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52, 4 / 52, 16 / 52, 4 / 52, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52, 4 / 52, 4 / 52, 16 / 52, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52,
             4 / 52, 4 / 52, 4 / 52, 16 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52, 4 / 52, 4 / 52, 20 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52,
             4 / 52, 4 / 52, 24 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52,
             4 / 52, 28 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52, 32 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52,
             4 / 52,
             36 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52,
             40 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52,
             44 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 48 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]])

        self.DT = numpy.array([
            [0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52,
             4 / 52,
             4 / 52, 0, 0, 0, 0, 16 / 52, 0],
            [0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16 / 52, 0, 0, 0, 0, 4 / 52, 4 / 52,
             4 / 52, 4 / 52, 0, 0, 0, 0, 4 / 52, 0],
            [0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 16 / 52, 0, 0, 0, 4 / 52, 4 / 52,
             4 / 52, 4 / 52, 0, 0, 0, 0, 4 / 52, 0],
            [0, 0, 0, 0, 4 / 52, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 16 / 52, 0, 0, 4 / 52, 4 / 52,
             4 / 52, 4 / 52, 0, 0, 0, 0, 4 / 52, 0],
            [0, 0, 0, 0, 0, 4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 16 / 52, 0, 4 / 52, 4 / 52,
             4 / 52, 4 / 52, 0, 0, 0, 0, 4 / 52, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 16 / 52, 4 / 52, 4 / 52,
             4 / 52, 4 / 52, 0, 0, 0, 0, 4 / 52, 0],
            [0, 0, 4 / 52, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 16 / 52, 0, 0,
             0,
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 4 / 52, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 16 / 52, 0,
             0,
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 4 / 52, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 16 / 52,
             0,
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 4 / 52, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             16 / 52,
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             16 / 52,
             4 / 52, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0,
             4 / 52, 0, 0, 16 / 52, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0,
             4 / 52,
             0, 4 / 52, 16 / 52, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0,
             4 / 52,
             4 / 52, 4 / 52, 16 / 52, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 4 / 52,
             4 / 52, 4 / 52, 16 / 52, 4 / 52, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 4 / 52,
             4 / 52, 4 / 52, 4 / 52, 16 / 52, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 4 / 52,
             4 / 52,
             4 / 52, 4 / 52, 4 / 52, 16 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 0, 0, 0, 0, 4 / 52, 4 / 52,
             4 / 52, 4 / 52, 4 / 52, 20 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 0, 0, 0, 0, 4 / 52, 4 / 52,
             4 / 52,
             4 / 52, 4 / 52, 24 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52,
             4 / 52,
             4 / 52, 28 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 / 52, 4 / 52, 4 / 52, 4 / 52,
             4 / 52, 32 / 52],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]])

        Q = self.DT[:21, :21]
        R = self.DT[:21, 21:]
        Identity = numpy.eye(21)
        self.A = numpy.linalg.inv(Identity - Q).dot(R)
        for i in range(0, 4):
            self.A[:, i] += self.A[:, 4]
            self.A = numpy.delete(self.A, 4, axis=1)
        # A = numpy.round(A, 4)

    # returns the outcome given the player's total and dealer's total
    def win(self, p, d):
        self.fix = None
        if p > d or d > 21:
            return 1
        elif p < d:
            return -1
        else:
            return 0

    # creating an matrix with the stand values but not repeating for soft and hard hands
    def stand(self, p, d):
        s = 0
        if d == 1:
            d = -4
        D = [17, 18, 19, 20, 21, 22]
        for x in D:
            s += self.win(p, x) * self.A[d + 4][x - 17]
        if p > 21:
            s = -1
        if d == -4:
            d = 1
        self.V[p + 8][d - 1] = s

    # double for loop to run through stand() with all player's total and dealer's initial
    def loop(self):
        self.matrices()
        for i in range(1, 11):
            for j in range(22, 1, -1):
                self.stand(j, i)

    # fills the gaps in the stand matrix
    def v0(self):
        self.loop()
        for i in range(0, 10):
            self.V[i] = self.V[i+19]
        self.Y = self.V.copy()

    # calculates the optimal matrix until it doesn't change using the matrix formula
    def compare(self):
        self.v0()
        for i in range(1, 50):
            Z = self.PT.dot(self.V)
            self.V = numpy.maximum(self.V, Z)

    # creates a matrix with all the double values
    def double(self, p, d):
        total = 0
        count = 0
        for x in self.PT[p]:
            total += x*self.Y[count][d]
            count += 1
        self.D[p][d] = total

    # creates a matrix with all the split values
    def split(self):
        self.compare()
        self.S[0] = self.V[0]*self.V[0];
        for i in range(1, 11):
            self.S[i] = self.V[i+6]*self.V[i+6];

    # function to create all matrices
    def start(self):
        self.split()
        for i in range(0, 10):
            for j in range(0, 31):
                self.double(j, i)

    # get the optimal policy
    def getV(self):
        return self.V

    # get all the stand values
    def getY(self):
        return self.Y

    # get all the split values
    def getS(self):
        return self.S

    # get all the double values
    def getD(self):
        return self.D
